return(events),
return(events %>% filter(id %in% round)))
}
# getHistPlayerInfo
#' getHistPlayerInfo
#'
#' This function fetches historical summary information on selected players given player ID(s).
#' @param playerid The player's ID. Can be found using getPlayerID(). You can list multiple , e.g. with c(). If blank, the function fetches all current players - note that takes a while to load.
#' @keywords player
#' @export
#' @examples
#' getHistPlayerInfo()
getHistPlayerInfo <- function(playerid=NULL){
elements <- fromJSON("https://fantasy.premierleague.com/drf/elements")
elements$playername <- paste(elements$first_name,elements$second_name)
ifelse(
is.null(playerid),
{
histinfo <- data.frame()
for (i in 1:nrow(elements)){
fplboot <- fromJSON(url(paste("https://fantasy.premierleague.com/drf/element-summary/",i,sep="")))$history_past
histinfo <- rbind(histinfo,data.frame(fplboot,playername=rep(elements$playername[which(elements$id==i)],length(unique(fplboot$season_name)))))}
return(histinfo)
},
{
histinfo <- data.frame()
for (i in 1:length(playerid)){
fplboot <- fromJSON(url(paste("https://fantasy.premierleague.com/drf/element-summary/",playerid[i],sep="")))$history_past
histinfo <- rbind(histinfo,data.frame(fplboot,playername=rep(elements$playername[which(elements$id==playerid[i])],length(unique(fplboot$season_name)))))}
return(histinfo)})
}
# getDetailedPlayerInfo
#' getDetailedPlayerInfo
#'
#' This function fetches detailed, gameweek-by-gameweek information for the current season on selected players given player ID(s).
#' @param playerid The player's ID. Can be found using getPlayerID(). You can list multiple , e.g. with c(). If blank, the function fetches all current players - note that takes a while to load.
#' @keywords player
#' @export
#' @examples
#' getDetailedPlayerInfo()
getDetailedPlayerInfo <- function(playerid=NULL){
elements <- fromJSON("https://fantasy.premierleague.com/drf/elements")
elements$playername <- paste(elements$first_name,elements$second_name)
ifelse(
is.null(playerid),
{
detinfo <- data.frame()
for (i in 1:nrow(elements)){
fplboot <- fromJSON(url(paste("https://fantasy.premierleague.com/drf/element-summary/",i,sep="")))$history
detinfo <- rbind(detinfo,data.frame(fplboot,playername=rep(elements$playername[which(elements$id==i)],length(unique(fplboot$id)))))}
return(detinfo)
},
{
detinfo <- data.frame()
for (i in 1:length(playerid)){
fplboot <- fromJSON(url(paste("https://fantasy.premierleague.com/drf/element-summary/",playerid[i],sep="")))$history
detinfo <- rbind(detinfo,data.frame(fplboot,playername=rep(elements$playername[which(elements$id==playerid[i])],length(unique(fplboot$id)))))}
return(detinfo)})
}
# getGameList
#' getGameList
#'
#' This function fetches a basic list of games.
#' @keywords game
#' @export
#' @examples
#' getGameList()
getGameList <- function(gameid=NULL){
fixtures <- fromJSON("https://fantasy.premierleague.com/drf/fixtures/")
data.frame(
"GW"=fixtures$event,
"id"=fixtures$id,
"home"=fixtures$team_h,
"away"=fixtures$team_a,
"finished"=fixtures$finished,
"kickoff"=fixtures$kickoff_time) %>%
mutate(home=recode(home,"1"="ARS","2"="BOU","3"="BHA","4"="BUR","5"="CAR","6"="CHE","7"="CRY","8"="EVE","9"="FUL","10"="HUD","11"="LEI","12"="LIV","13"="MCI","14"="MUN","15"="NEW","16"="SOU","17"="TOT","18"="WAT","19"="WHU","20"="WOL")) %>%
mutate(away=recode(away,"1"="ARS","2"="BOU","3"="BHA","4"="BUR","5"="CAR","6"="CHE","7"="CRY","8"="EVE","9"="FUL","10"="HUD","11"="LEI","12"="LIV","13"="MCI","14"="MUN","15"="NEW","16"="SOU","17"="TOT","18"="WAT","19"="WHU","20"="WOL"))
}
# getFDR()
#' getFDR
#'
#' This function fetches FPL's 'team strength' measures, which form the basis of the 'FDR' (Fixture Difficulty Rating)
#' @keywords teams
#' @export
#' @examples
#' getTeamsStrength()
getFDR() <- function(){
teams <- fromJSON("https://fantasy.premierleague.com/drf/teams")
return(teams)
}
# getGameStats
#' getGameStats
#'
#' This function fetches detailed statistics for a game given the game ID. It fetches ten variables that are accessed as lists with home and away players, e.g. with '$': goals_scored, assists, own_goals, penalties_saved, yellow_cards, red_cards, saves, bonus, and bps.
#' @param gameid The game ID. Can be found with getGameList().
#' @keywords game
#' @export
#' @examples
#' getGameStats()
getGameStats <- function(gameid=NULL){
ifelse(
is.null(id),
return(print("You'll need to input a game ID, mate.")),
ifelse(length(id)!=1,"One at a time, please",
{
fixtures <- fromJSON("https://fantasy.premierleague.com/drf/fixtures")
return((fixtures %>% filter(id %in% gameid))$stats[[1]])
}
))
}
# getEntry()
#' getEntry
#'
#' This function fetches detailed information for a Fantasy Premier League entry given the entry ID(s). IMPORTANT NOTE: FPL generally asks scrapers NOT to abuse the /entry sites (see: https://fantasy.premierleague.com/robots.txt).
#' @param entryid The entry ID(s). Can be found on the FPL website under 'Gameweek history' in the URL - https://fantasy.premierleague.com/a/entry/XXXXXX/history.
#' @keywords entry
#' @export
#' @examples
#' getEntry()
getEntry <- function(entryid=NULL){
ifelse(
is.null(entryid),
return(print("You'll need to input at least one entry ID, mate.")),
ifelse(length(entryid)!=1,"One at a time, please",
{
entry <- fromJSON(paste("https://fantasy.premierleague.com/drf/entry/",entryid,sep=""))
return(entryhistory)
}
))
}
# getEntryHistory()
#' getEntryHistory
#'
#' This function fetches historical statistics for a Fantasy Premier League entry given the entry ID(s). IMPORTANT NOTE: FPL generally asks scrapers NOT to abuse the /entry sites (see: https://fantasy.premierleague.com/robots.txt).
#' @param entryid The entry ID(s). Can be found on the FPL website under 'Gameweek history' in the URL - https://fantasy.premierleague.com/a/entry/XXXXXX/history. You can list multiple , e.g. with c().
#' @keywords entry
#' @export
#' @examples
#' getEntryHistory()
getEntryHistory <- function(entryid=NULL){
ifelse(
is.null(entryid),
return(print("You'll need to input at least one entry ID, mate.")),
{
entryhistory <- data.frame()
for (i in 1:length(entryid)){
entry <- fromJSON(paste("https://fantasy.premierleague.com/drf/entry/",entryid[i],"/history",sep=""))
entryhistory <- rbind(entryhistory,data.frame(entry$season,name=paste(entry$entry$player_first_name,entry$entry$player_last_name)))
}
return(entryhistory)
}
)
}
# getEntrySeason()
#' getEntrySeason
#'
#' This function fetches in-season statistics for a Fantasy Premier League entry given the entry ID(s). IMPORTANT NOTE: FPL generally asks scrapers NOT to abuse the /entry sites (see: https://fantasy.premierleague.com/robots.txt).
#' @param entryid The entry ID(s). Can be found on the FPL website under 'Gameweek history' in the URL - https://fantasy.premierleague.com/a/entry/XXXXXX/history. You can list multiple , e.g. with c().
#' @keywords entry
#' @export
#' @examples
#' getEntrySeason()
getEntrySeason <- function(entryid=NULL){
ifelse(
is.null(entryid),
return(print("You'll need to input at least one entry ID, mate.")),
{
entryseason <- data.frame()
for (i in 1:length(entryid)){
entry <- fromJSON(paste("https://fantasy.premierleague.com/drf/entry/",entryid[i],"/history",sep=""))
entryseason <- rbind(entryseason,data.frame(entry$history,name=paste(entry$entry$player_first_name,entry$entry$player_last_name)))
}
return(entryseason)
}
)
}
# getEntryPicks()
#' getEntryPicks
#'
#' This function fetches player picks for a Fantasy Premier League entry given the entry ID and GW. IMPORTANT NOTE: FPL generally asks scrapers NOT to abuse the /entry sites (see: https://fantasy.premierleague.com/robots.txt).
#' @param entryid The entry ID(s). Can be found on the FPL website under 'Gameweek history' in the URL - https://fantasy.premierleague.com/a/entry/XXXXXX/history.
#' @param gw The GW for which player picks is requested
#' @keywords entry
#' @export
#' @examples
#' getEntryPicks()
getEntryPicks <- function(entryid=NULL,gw=NULL){
ifelse(
is.null(entryid),
return(print("You'll need to input at least one entry ID, mate.")),
ifelse(length(entryid)!=1,"One at a time, please",
ifelse(
is.null(gw),
return(print("You'll need to input a GW, mate.")),
{
picks <- fromJSON(paste("https://fantasy.premierleague.com/drf/entry/",entryid,"/event/",gw,"/picks",sep=""))
return(picks)
}
)))
}
# getLeague()
#' getLeague
#'
#' This function fetches statistics for a Fantasy Premier League mini-league given the league ID and type. IMPORTANT NOTE: FPL generally asks scrapers NOT to abuse the /league sites (see: https://fantasy.premierleague.com/robots.txt).
#' @param leagueid The league ID(s). Can be found on the FPL website.
#' @param leaguetype The league type: 'classic' or 'h2h'.
#' @keywords league
#' @export
#' @examples
#' getLeague()
getLeague <- function(leagueid=NULL,leaguetype="classic"){
ifelse(
is.null(leagueid),
return(print("You'll need to input at least one entry ID, mate.")),
{
league <- fromJSON(paste("https://fantasy.premierleague.com/drf/leagues-",leaguetype,"-standings/",leagueid,sep=""))
return(league)
}
)
}
getFDR <- function(){
teams <- fromJSON("https://fantasy.premierleague.com/drf/teams")
return(teams)
}
# getFDR()
#' getFDR
#'
#' This function fetches FPL's 'team strength' measures, which form the basis of the 'FDR' (Fixture Difficulty Rating)
#' @keywords teams
#' @export
#' @examples
#' getTeamsStrength()
getFDR <- function(){
teams <- fromJSON("https://fantasy.premierleague.com/drf/teams")
return(teams)
}
document()
document()
setwd("..")
install("fplscrapR")
getLeague(441)
getLeague(441,type="classic")
?getLeague
getLeague(441,leaguetype="classic")
document()
document()
document()
devtools::document()
setwd("fplscrapR")
getwd()
document()
document()
?
?
?get_player_id
?getPlayerID
?get_player_id
?get_player_name
document()
document()
?get_player_id
document()
library(devtools)
library(roxygen2)
document()
document()
document(clean=T)
document(clean=TRUE)
load_all()
document()
document()
document()
document()
?getPlayerID
document()
document()
document()
load_all()
document(clean=T)
document()
?getPlayerID
library(fplscrapR)
?getPlayerID
?get_player_id
?get_player_name
document()
?get_player_name
?get_player_info
document()
?get_player_info
document()
?get_player_hist
?get_player_details
?get_round_info
?get_game_list
?get_game_stats
?get_entry
?get_entry_hist
?get_entry_season
?get_entry_picks
?get_league
?get_fdr
?get_entry_hist()
devtools::use_vignette("avgfplplayercost")
document()
devtools::use_vignette("entryscores")
?get_round_info
library(fplscrapR)
df <- get_round_info(1:25)
document()
load_all()
library(fplscrapR)
document()
get_round_info(1:25)
get_round_info <- function(round = NULL){
events <- jsonlite::fromJSON("https://fantasy.premierleague.com/drf/events")
ifelse(
is.null(round),
return(events),
return(events %>% filter(id %in% round)))
}
get_round_info <- function(round = NULL){
events <- jsonlite::fromJSON("https://fantasy.premierleague.com/drf/events")
ifelse(
is.null(round),
return(events),
return(events %>% filter(id %in% round)))
}
get_round_info(4)
?%>%
document()
library(fplscrapR)
document()
get_round_info(4)
library(fplscrapR)
document()
library(fplscrapR)
?get_round_info
get_round_info(4)
usethis::use_pipe()
document()
library(fplscrapR)
get_round_info(4)
devtools::use_vignette("hazalexishist")
get_player_id("Aléxis Sanchez")
get_player_id("Alèxis Sanchez")
get_player_id(c("Eden Hazard","Alexis Sánchez"))
get_player_hist("Eden Hazard")
get_player_hist(get_player_id("Eden Hazard")$id)
devtools::use_vignette("aubatransfers")
usethis::use_vignette("salahpoints")
usethis::use_vignette("topperformers")
usethis::use_vignette("simplexamodel")
df <- get_player_details() # this may take a while to load as it fetches ALL player details
library(dplyr)
dfmodel <- df %>%
filter(round %in% 1:25) %>% # filtering out the rounds we are interested in
mutate(potentialassists = key_passes+open_play_crosses) %>% # creating a new variable that give us a potential indicator for expected assists, namely the number of key passes and open play crosses for each player
select(playername,assists,potentialassists) %>% # selecting the variables we need for our analysis
group_by(playername) %>% # transformation to group and summarize all our variables (i.e. the actual and potential assists) at the 'playername' variable level
summarize_all(sum) %>%
mutate(xA=potentialassists*(sum(assists)/sum(potentialassists))) # creating a new variable called 'xA' that attempts to predict the actual number of assists based on the relationship (from our data) between the number of assists and key passes+open play cross a player has produced
#```
#```{r, message=F,warning=F}
library(dplyr)
library(ggplot2)
library(ggrepel)
#```
#```{r,warning=F}
dfmodel %>%
ggplot(aes(x=xA,y=assists)) +
geom_point(alpha=0.5,size=2) +
theme_bw() +
labs(x="Expected assists",y="Actual assists",title="Expected vs. actual assists",subtitle="Season 2018/2019 - Gameweeks 1-25", caption=paste("Data from fplscrapR | ",Sys.Date(),sep="")) +
geom_abline(intercept=0,slope=1,colour="grey",size=0.5) +
geom_text_repel(size=3.75,aes(
label=ifelse(xA>quantile(xA,prob=1-1.5/100),as.character(playername),ifelse(assists>quantile(assists,prob=1-1.5/100),as.character(playername),"")))) + #
scale_x_continuous(limits=c(0,12),breaks=0:12) +
scale_y_continuous(limits=c(0,12),breaks=0:12)
#```
Finally, we test our xA model to see how it fares in explaining the variation of actual assists, using the summary function from R base:
#```{r,warning=F}
summary(lm(test,formula=xA ~ assists))
#```
summary(lm(test,formula=xA ~ assists))
summary(lm(dfmodel,formula=xA ~ assists))
usethis::use_vignette("afdr")
usethis::use_vignette("fixtable")
get_game_list <- function(){
fixtures <- jsonlite::fromJSON("https://fantasy.premierleague.com/drf/fixtures/")
data.frame(
"GW"=fixtures$event,
"id"=fixtures$id,
"home"=fixtures$team_h,
"away"=fixtures$team_a,
"finished"=fixtures$finished,
"kickoff"=fixtures$kickoff_time) %>%
dplyr::mutate(home=recode(home,"1"="ARS","2"="BOU","3"="BHA","4"="BUR","5"="CAR","6"="CHE","7"="CRY","8"="EVE","9"="FUL","10"="HUD","11"="LEI","12"="LIV","13"="MCI","14"="MUN","15"="NEW","16"="SOU","17"="TOT","18"="WAT","19"="WHU","20"="WOL")) %>%
dplyr::mutate(away=recode(away,"1"="ARS","2"="BOU","3"="BHA","4"="BUR","5"="CAR","6"="CHE","7"="CRY","8"="EVE","9"="FUL","10"="HUD","11"="LEI","12"="LIV","13"="MCI","14"="MUN","15"="NEW","16"="SOU","17"="TOT","18"="WAT","19"="WHU","20"="WOL"))
}
document()
library(fplscrapR)
gamelist <- get_game_list()
get_game_list <- function(){
fixtures <- jsonlite::fromJSON("https://fantasy.premierleague.com/drf/fixtures/")
data.frame(
"GW"=fixtures$event,
"id"=fixtures$id,
"home"=fixtures$team_h,
"away"=fixtures$team_a,
"finished"=fixtures$finished,
"kickoff"=fixtures$kickoff_time) %>%
dplyr::mutate(home=recode(home,"1"="ARS","2"="BOU","3"="BHA","4"="BUR","5"="CAR","6"="CHE","7"="CRY","8"="EVE","9"="FUL","10"="HUD","11"="LEI","12"="LIV","13"="MCI","14"="MUN","15"="NEW","16"="SOU","17"="TOT","18"="WAT","19"="WHU","20"="WOL")) %>%
dplyr::mutate(away=recode(away,"1"="ARS","2"="BOU","3"="BHA","4"="BUR","5"="CAR","6"="CHE","7"="CRY","8"="EVE","9"="FUL","10"="HUD","11"="LEI","12"="LIV","13"="MCI","14"="MUN","15"="NEW","16"="SOU","17"="TOT","18"="WAT","19"="WHU","20"="WOL"))
}
get_game_list
get_game_list()
library(fplscrapR)
gamelist <- get_game_list()
library(dplyr)
library(ggplot2)
allfixtures <- rbind(
gamelist %>% mutate(team=home,oppo=away,homeaway="home"),
gamelist %>% mutate(team=away,oppo=tolower(home),homeaway="away"))
allfixtures %>%
filter(GW %in% 1:25) %>% # filtering for the gameweeks we are interested in
ggplot() +
geom_tile(aes(x=GW,y=team),fill="white",colour="lightgrey") +
geom_text(aes(x=GW,y=team,label=oppo),size=2) +
theme_void() +
theme(axis.text = element_text(face = "bold")) +
theme(axis.text.y = element_text(margin=margin(0,-20,0,0))) + # fixing the margins on the tile
scale_x_continuous(position="top",breaks=1:38) +
labs(caption=paste("Data from fplscrapR | ",Sys.Date(),sep=""))
gamelist <- get_game_list
gamelist
gamelist <- get_game_list()
gamelist
gamelist <- get_game_list()
gamelist
library(fplscrapR)
document()
library(fplscrapR)
document()
library(fplscrapR)
document()
library(fplscrapR)
usethis::use_vignette("afdrtable")
usethis::use_vignette("fdrtable")
usethis::use_vignette("bpsforgame")
get_game_stats(6)
?get_game_stats(6)
get_game_stats(6)
get_game_stats(gameid=6)
document()
library(fplscrapR)
usethis::use_vignette("findgoalscorers")
usethis::use_vignette("listmyleagues")
library(fplscrapR)
df <- get_entry(entryid=1076)
document()
library(fplscrapR)
usethis::use_vignette("vizentryhist")
usethis::use_vignette("vizrankprogress")
usethis::use_vignette("mltop")
?get_league
usethis::use_vignette("mlmostowned")
?unnest
??unnes
??unnest
load_all()
devtools::use_testthat()
usethis::use_testthat()
citation("fplscrapR")
----
library(jsonlite)
library(dplyr)
df <- fromJSON("https://fantasy.premierleague.com/drf/bootstrap-static")
str(df)
df <- fromJSON("https://fantasy.premierleague.com/drf/bootstrap-dynamic")
str(df)
df <- fromJSON("https://fantasy.premierleague.com/drf/fixtures")
str(df)
str(df)
library(fplscrapR)
document()
library(roxygen2)
library(devtools)
document()
import(dplyr)
?importFrom
??import
library(usethis)
?importFrom
?import
use_cc0_license
use_cc0_license()
?use_cc0_license()
use_cc0_license("Rasmus Wiscostretford")
?use_readme_md()
getPlayerID <- NULL
getPlayerInfo <- NULL
getPlayerName <- NULL
library(fplscrapR)
library(devtools)
library(roxygen2)
document()
library(fplscrapR)
document()
hello
git init
